"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const IUser_1 = require("../../../models/IUser");
const format_money_1 = __importDefault(require("../../utlis/format_money"));
const ISentence_1 = require("../../../models/ISentence");
function greeting(ctx) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.from) {
                let user = yield IUser_1.User.findOne({ id: ctx.from.id });
                if (user) {
                    const extra = {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–û –ø—Ä–æ–µ–∫—Ç–µ',
                                        callback_data: 'about'
                                    }
                                ],
                                [
                                    {
                                        text: '–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                        callback_data: 'messages'
                                    }
                                ],
                                [
                                    {
                                        text: 'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                                        callback_data: 'help'
                                    }
                                ],
                                [
                                    {
                                        text: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                        callback_data: 'common_settings'
                                    }
                                ],
                                [
                                    {
                                        text: '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                        callback_data: 'reference_materials'
                                    }
                                ],
                                [
                                    {
                                        text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                                        callback_data: 'referral'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–∞–¥',
                                        callback_data: 'home'
                                    },
                                    {
                                        text: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                                        url: 'https://t.me/bur_live'
                                    }
                                ],
                            ]
                        }
                    };
                    const confirmatedTranslations = yield get_confirmated_translations(ctx.from.id);
                    let words = [];
                    let message = `<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> \n\n`;
                    message += `–†–µ–π—Ç–∏–Ω–≥: ${user.rating} \n`;
                    // message += `–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: 0 \n`
                    // message += `–°–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${words.length} \n`
                    message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${(_a = user.proposed_proposals) === null || _a === void 0 ? void 0 : _a.length}\n`;
                    if (confirmatedTranslations) {
                        message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${confirmatedTranslations.length} \n`;
                    }
                    message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥: ${(_b = user.voted_translations) === null || _b === void 0 ? void 0 : _b.length}`;
                    message += `\n\n<b>–í–Ω–µ—Å–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç ${(0, format_money_1.default)(user.supported)} ‚ÇΩ</b>`;
                    ctx.updateType === 'message' ? yield ctx.reply(message, extra) : false;
                    ctx.updateType === 'callback_query' ? yield ctx.editMessageText(message, extra) : false;
                }
                else {
                    console.log('123');
                }
            }
        }
        catch (err) {
            console.error(err);
        }
    });
}
exports.default = greeting;
function get_confirmated_translations(user_id) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const user = yield IUser_1.User.findOne({ id: user_id });
            if (!user || !user._id) {
                return false;
            }
            const docs = yield ISentence_1.ConfirmedTranslations.find({ author: user._id });
            return docs;
        }
        catch (error) {
            console.error(error);
        }
    });
}
//# sourceMappingURL=greeting.js.map