"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const greeting_1 = __importDefault(require("./dashboardView/greeting"));
const helpHandler_1 = __importStar(require("./dashboardView/helpHandler"));
const axios_1 = __importDefault(require("axios"));
const path = require('path'); // –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å path
const pdf2pic = require('pdf2pic'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º pdf2pic
const pdf = require('pdf-parse'); // –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É pdf-parse
const fs = require('fs'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å fs –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const handler = new telegraf_1.Composer();
const dashboard = new telegraf_1.Scenes.WizardScene("dashboard", handler, (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield about_project(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield (0, helpHandler_1.default)(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield reference_materials_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield spb_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield messages_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield crypto_pay_check(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield crypto_pay_check_handler(ctx); }), (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield referral_section_handler(ctx); }));
function referral_section_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                const data = ctx.update.callback_query.data;
                if (data === 'back') {
                    ctx.wizard.selectStep(0);
                    yield (0, greeting_1.default)(ctx);
                }
            }
        }
        catch (error) {
            ctx.wizard.selectStep(0);
            yield (0, greeting_1.default)(ctx);
            console.error(error);
        }
    });
}
function crypto_pay_check_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'message') {
            }
        }
        catch (error) {
            console.error(error);
        }
    });
}
function crypto_pay_check(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                const data = ctx.update.callback_query.data;
                if (data === 'back') {
                    yield help(ctx);
                }
                if (data === 'success') {
                    const message = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–µ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.000456 btc</code>`;
                    const extra = {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'back', callback_data: 'back' }]
                            ]
                        }
                    };
                    yield ctx.editMessageText(message, extra);
                }
            }
        }
        catch (error) {
            yield (0, greeting_1.default)(ctx);
            ctx.wizard.selectStep(0);
            console.error(error);
        }
    });
}
function messages_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                let data = ctx.update.callback_query.data;
                if (data === 'back') {
                    ctx.wizard.selectStep(0);
                    ctx.answerCbQuery();
                    return yield (0, greeting_1.default)(ctx);
                }
            }
            else {
                yield messages(ctx);
            }
        }
        catch (error) {
            console.error(error);
        }
    });
}
function spb_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'message') {
                if (ctx.update.message.text) {
                    const message = ctx.update.message.text;
                    if (message === '/check') {
                        let reply_message = `–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç \n–°–ø–∞—Å–∏–±–æ üòá\n\n`;
                        reply_message += `–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è, –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å`;
                        yield ctx.reply(reply_message, { parse_mode: 'HTML' });
                        ctx.wizard.selectStep(0);
                        return (0, greeting_1.default)(ctx);
                    }
                    if (message === '/cancel') {
                    }
                    return (0, helpHandler_1.spb)(ctx);
                }
            }
        }
        catch (error) {
            console.error(error);
        }
    });
}
// –°–µ–∫—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function reference_materials_handler(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                let data = ctx.update.callback_query.data;
                if (data === 'back') {
                    ctx.wizard.selectStep(0);
                    yield (0, greeting_1.default)(ctx);
                }
                ctx.answerCbQuery();
            }
        }
        catch (error) {
            console.error(error);
        }
    });
}
function reference_materials(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n`;
            message += `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –æ–±–æ–≥–∞—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. \n\n`;
            message += `–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∏—â–µ—Ç–µ –ª–∏ –≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É—á–µ–±—ã, —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —ç—Ç–∞ —Å–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Ü–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.`;
            let extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ callback_data: 'add', text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª' }],
                        [{ callback_data: 'back', text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            };
            if (ctx.updateType === 'callback_query') {
                yield ctx.editMessageText(message, extra);
            }
            else {
                yield ctx.reply(message, extra);
            }
            ctx.wizard.selectStep(3);
        }
        catch (error) {
            console.error(error);
        }
    });
}
dashboard.enter((ctx) => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, greeting_1.default)(ctx);
}));
dashboard.action("referral", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        const message = `<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b> \n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/burlive_test_bot?start=ref_${(_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id}</code>`;
        const extra = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'back', callback_data: 'back' }]
                ]
            }
        };
        yield ctx.editMessageText(message, extra);
        ctx.answerCbQuery();
        ctx.wizard.selectStep(8);
    }
    catch (error) {
        console.error(error);
    }
}));
dashboard.action("messages", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield messages(ctx); }));
function messages(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n`;
            message += `–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç`;
            const extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ù–∞–∑–∞–¥', callback_data: 'back'
                            }
                        ]
                    ]
                }
            };
            ctx.wizard.selectStep(5);
            if (ctx.updateType === 'callback_query') {
                ctx.answerCbQuery();
                yield ctx.editMessageText(message, extra);
            }
            else {
                yield ctx.reply(message, extra);
            }
        }
        catch (error) {
            console.error(error);
        }
    });
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dashboard.action("common_settings", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    yield ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    return ctx.scene.enter('settings');
}));
function fetchPdfToBuffer(pdfUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield axios_1.default.get(pdfUrl, { responseType: 'arraybuffer' });
            return Buffer.from(response.data); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ –≤ –±—É—Ñ–µ—Ä
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF:', error);
            return null;
        }
    });
}
dashboard.on('document', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const file = ctx.message.document;
    const fileId = yield ctx.telegram.getFile(file.file_id);
    const fileLink = yield ctx.telegram.getFileLink(file.file_id);
    const destinationPath = path.join(__dirname, 'dashboardView/downloaded_pdfs', file.file_name); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    yield downloadPdf(fileLink.href, destinationPath); // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    ctx.reply('PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
}));
dashboard.command('page', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const pageNumber = parseInt(ctx.message.text.split(' ')[1]);
    if (!isNaN(pageNumber)) {
        try {
            const imageBase64 = yield convertPageToImage(ctx, pageNumber);
            const imageBase64String = imageBase64; // Explicitly cast to string
            console.log(imageBase64);
            ctx.replyWithPhoto({ source: imageBase64String }, {
                reply_markup: {
                    inline_keyboard: [
                        [{ callback_data: 'back', text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            });
        }
        catch (error) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.');
            console.log(error);
        }
    }
    else {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
    }
}));
function downloadPdf(pdfUrl, destinationPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield axios_1.default.get(pdfUrl, {
                responseType: 'arraybuffer'
            });
            fs.writeFileSync(destinationPath, response.data);
            console.log(`PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${destinationPath}`);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF:', error);
        }
    });
}
function convertPageToImage(ctx, pageNumber) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!ctx.scene.session.link) {
            return '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.';
        }
        const fileLink = ctx.scene.session.link;
        console.log(fileLink.href);
        yield downloadPdf(fileLink.href, './');
        // try {
        //     const options = {
        //         density: 100,
        //         saveFilename: "page" + pageNumber,
        //         savePath: "./images",
        //         format: "png",
        //         width: 600,
        //         height: 800
        //     };
        //     // console.log(file)
        //     const response = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
        //     // const convert = pdf2pic.fromBase64(response.data, options);
        //     const pageToConvertAsImage = pageNumber;
        //     // return new Promise((resolve, reject) => {
        //     //     convert(pageToConvertAsImage, { responseType: "base64" })
        //     //         .then((resolveData: any) => {
        //     //             console.log("Page is now converted as image");
        //     //             resolve(resolveData.base64);
        //     //         })
        //     //         .catch((error: any) => {
        //     //             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
        //     //             reject(error);
        //     //         });
        //     // });
        // } catch (error) {
        //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
        //     return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.';
        // }
    });
}
// async function extractTextFromPage(ctx: rlhubContext, pageNumber: number) {
//     if (!ctx.scene.session.link) {
//         return '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.';
//     }
//     const fileLink = ctx.scene.session.link.href;
//     try {
//         const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
//         const data = await pdf(response.data);
//         const allPages = data.text.split('\n\n');
//         const pageIndex = pageNumber - 1;
//         if (pageIndex >= 0 && pageIndex < allPages.length) {
//             return allPages[pageIndex];
//         } else {
//             return '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
//         return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.';
//     }
// }
function about_project(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (ctx.updateType === 'callback_query') {
                if (ctx.callbackQuery) {
                    // @ts-ignore
                    if (ctx.callbackQuery.data) {
                        // @ts-ignore
                        let data = ctx.callbackQuery.data;
                        if (data === 'back') {
                            ctx.wizard.selectStep(0);
                            yield ctx.answerCbQuery();
                            yield (0, greeting_1.default)(ctx);
                        }
                    }
                }
            }
            else {
                about_project_section_render(ctx);
            }
        }
        catch (err) {
            console.log(err);
        }
    });
}
dashboard.action("about", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield about_project_section_render(ctx); }));
function about_project_section_render(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–ù–µ–º–Ω–æ–≥–æ –æ –ø—Ä–æ–µ–∫—Ç–µ</b> \n\n`;
            message += `–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –ë—É—Ä—è—Ç–∏–∏. \n\n`;
            message += `–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —è–∑—ã–∫ —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—è —è–∑—ã–∫–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. \n\n`;
            message += `–ù–∞—à–∞ —Ü–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–æ–≥–∞—Ç—Å—Ç–≤–æ –±—É—Ä—è—Ç—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∏ –µ–µ —è–∑—ã–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π. \n\n`;
            message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?</a> \n`;
            message += `<a href="https://telegra.ph/Kak-podderzhat-proekt-09-02">–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?</a> \n`;
            message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏?</a> \n`;
            message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞?</a> \n\n`;
            message += `<i>–ë—É–¥—É —Ä–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞!\n\n @frntdev</i>`;
            let extra = {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'back',
                            }
                        ]
                    ]
                }
            };
            if (ctx.updateType === 'callback_query') {
                yield ctx.editMessageText(message, extra);
                ctx.answerCbQuery();
                ctx.wizard.selectStep(1);
            }
            else {
                yield ctx.reply(message, extra);
            }
        }
        catch (err) {
            console.log(err);
        }
    });
}
handler.on("message", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield (0, greeting_1.default)(ctx); }));
dashboard.action('reference_materials', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    yield reference_materials(ctx);
    return ctx.answerCbQuery();
}));
dashboard.action("help", (ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield help(ctx); }));
function help(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let message = `<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ üí∞</b> \n\n`;
            // await get_link_for_payment(ctx)
            message += `–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É \n\n`;
            // <i>–° –º–∏—Ä—É –ø–æ –Ω–∏—Ç–∫–µ!</i>\n\n`
            message += `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 ‚ÇΩ\n`;
            message += `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 60 000 ‚ÇΩ`;
            const extra = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '50 ‚ÇΩ', callback_data: 'rub 50' },
                            { text: '250 ‚ÇΩ', callback_data: 'rub 250' },
                            { text: '500 ‚ÇΩ', callback_data: 'rub 500' }
                        ],
                        [
                            { text: '750 ‚ÇΩ', callback_data: 'rub 750' },
                            { text: '1250 ‚ÇΩ', callback_data: 'rub 1250' },
                            { text: '2500 ‚ÇΩ', callback_data: 'rub 2500' }
                        ],
                        [
                            { text: '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'spb' }
                        ],
                        [
                            { text: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: 'crypto' }
                        ],
                        [
                            {
                                text: '–ù–∞–∑–∞–¥',
                                callback_data: 'back'
                            }
                        ]
                    ]
                }
            };
            if (ctx.updateType === 'callback_query') {
                yield ctx.editMessageText(message, extra);
            }
            ctx.wizard.selectStep(2);
        }
        catch (err) {
            console.log(err);
        }
    });
}
dashboard.action("home", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    return ctx.scene.enter('home');
}));
dashboard.action("contact", (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    return ctx.answerCbQuery('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å');
}));
exports.default = dashboard;
//# sourceMappingURL=dashboard.scene.js.map