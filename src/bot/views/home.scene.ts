import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";
import axios, { AxiosResponse } from 'axios';
import { v4 as uuidv4 } from 'uuid';
import { Invoice } from "telegraf/typings/core/types/typegram";
import { ICreatePayment, ICreateWebHook, YooCheckout } from '@a2seven/yoo-checkout';
const checkout = new YooCheckout({ shopId: '579916', secretKey: 'test_y3qEuwmGrbzcofTe0_QeFqhJryakOv-4z20Hu2fiDL0' });
interface ApiResponse {
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç –≤–∞—à–µ–≥–æ API
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "data", –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —ç—Ç–æ –∑–¥–µ—Å—å
    data: any; // –ó–∞–º–µ–Ω–∏—Ç–µ any –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    user: any
}

const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene("home", handler,
    async (ctx: rlhubContext) => await actionHandler(ctx));

const apiEndpoint = process.env.api_url

async function actionHandler(ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'message') {
        
            const user = await getMe(ctx)

            if (!user) {
                return await greeting(ctx)
            }

            if (user.freeSpin === 0) {

                let data = await getData();
                if (!data) {
                    return false
                }

                let extra: ExtraEditMessageText = {
                    parse_mode: 'HTML',
                    // reply_markup: {
                        // inline_keyboard: [
                            // [{ text: '–†–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ', callback_data: 'taro-action' }],
                            // [{ text: `üëë –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç ${data.price} ‚ÇΩ üëë`, callback_data: 'taro-action' }],
                        // ]
                    // }
                }

                let reply_markup = {
                    inline_keyboard: []
                }

                if (user.subscribe) {

                } else {
                    reply_markup.inline_keyboard.push([{ text: `üëë –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç ${data.price} ‚ÇΩ üëë`, callback_data: 'taro-action' }])
                    extra.reply_markup = reply_markup
                }

                return ctx.reply(`–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã`, extra)
            }

            const response = await axios.post(
                `${apiEndpoint}/telegram/question`,
                {
                    question: ctx.update.message.text,
                    telegramChatId: ctx.from.id
                },
                {
                    headers: {
                        Authorization: `Bearer ${ctx.scene.session.token}`,
                    },
                }
            );

            let message = response.data.answer

            if (user.subscribe) {
                message += `\n\n–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞!`
            } else {
                message += `\n\n–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ ${user.freeSpin - 1}/3`
            }


            ctx.reply(`${message}`)
        }

        if (ctx.updateType === 'callback_query') {

            const data: 'taro-action' = ctx.update.callback_query.data

            console.log(data)

            ctx.answerCbQuery()

        }

    } catch (error) {
        console.log(error.response.data.message)
    }
}

async function auth() {

    try {
        const credentials = {
            email: 'admin@mail.ru',
            password: 'adminadmin',
        };

        const token: string = await axios.post(`${apiEndpoint}/auth/login`, credentials)
            .then(response => {

                const token: string = response.data.token; // –ü–æ–ª—É—á–µ–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω
                return token
                // –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º API
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.response.data.message);
                return error.response.data.message
            });

        return token
    } catch (error) {
        // console.log(error)
        return error
    }

}

async function getData(): Promise<{ greeting: string, action: string, price: number } | false> {
    try {
        const token: string | null = await auth();
        if (!token) {
            return false;
        }

        const response: AxiosResponse<ApiResponse> = await axios.get(`${apiEndpoint}/bin`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        return response.data[0]; // –í–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    } catch (error) {
        return false;
    }
}

async function getMe(ctx: rlhubContext): Promise<{ freeSpin: number, subscribe: boolean } | false> {
    try {
        const token: string | null = await auth();

        if (!token) {
            return false;
        }

        ctx.scene.session.token = token

        const response: AxiosResponse<ApiResponse> = await axios.get(`${apiEndpoint}/telegram/${ctx.from.id}`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        return response.data.user // –í–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    } catch (error) {
        return false;
    }
}

const greeting = async function (ctx: rlhubContext) {

    try {

        const token: string | null = await auth();
        if (!token) {
            return false;
        }

        const isExists = await axios.get(`${apiEndpoint}/telegram/${ctx.from.id}`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        })

        if (isExists.data.message === 'User not found') {

            const response = await axios.post(
                `${apiEndpoint}/telegram/create`,
                {
                    telegramChatId: ctx.from.id,
                    payload: ctx.startPayload,
                    firstName: ctx.from.first_name
                },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            console.log(response)

        }

        let data = await getData();
        if (data) {
            let message = data.greeting;
            await ctx.reply(message, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', callback_data: 'start-chat' }]
                    ]
                }
            });

        } else {
            console.error("Failed to get data");
        }
    } catch (error) {
        console.log(error);
    }
};


home.start(async (ctx: rlhubContext) => {
    await greeting(ctx)
});

home.action("vocabular", async (ctx) => {
    ctx.answerCbQuery()
    return ctx.scene.enter('vocabular')
})

home.action("sentences", async (ctx) => {
    return ctx.scene.enter('sentences')
})

home.action("start-chat", async (ctx: rlhubContext) => await renderAction(ctx))
async function renderAction(ctx: rlhubContext) {
    try {

        ctx.wizard.selectStep(1)
        let data = await getData();
        if (data) {

            let message = data.action

            message += `\n\n`
            const me = await getMe(ctx)

            if (!me) { return false }

            if (me.subscribe) {
                message += `\n\n–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞!`
            } else {
                message += `\n\n–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ ${me.freeSpin - 1}/3`
            }

            const extra: ExtraEditMessageText = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        // [{ text: '–†–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ', callback_data: 'taro-action' }],
                        [{ text: `üëë –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –æ—Ç ${data.price} ‚ÇΩ üëë`, callback_data: 'taro-action' }],
                    ]
                }
            }

            await ctx.editMessageText(message, extra)

        }
    } catch (error) {
        console.log(error)
    }
}

home.command('pay', async (ctx: rlhubContext) => {

    let data = await getData();
    if (data) {

        let price = data.price

        // const createWebHookPayload: ICreateWebHook = {
        //     event: 'payment.succeeded',
        //     url: 'https://91b4-65-21-153-43.ngrok-free.app/success'
        // };

        const createPayload: ICreatePayment = {
            amount: {
                value: `${price}.00`,
                currency: 'RUB'
            },
            payment_method_data: {
                type: 'bank_card'
            },
            confirmation: {
                type: 'redirect',
                return_url: 'test'
            },
            metadata: {
                telegramChatId: ctx.from.id
            }
        };

        try {

            const idempotenceKey = uuidv4();
            const payment = await checkout.createPayment(createPayload, idempotenceKey);

            await axios.post(`${apiEndpoint}/telegram/new-payment`, {
                id: payment.id,
                url: payment.confirmation.confirmation_url,
                telegramChatId: ctx.from.id
            }, {
                headers: {
                    Authorization: `Bearer ${ctx.scene.session.token}`,
                },
            });
            const message = `‚ú® –û—Ç–ª–∏—á–Ω–æ! –í—ã –≥–æ—Ç–æ–≤—ã –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –º–∏—Ä –º–∞–≥–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ –¢–∞—Ä–æ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.

üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: ${payment.confirmation.confirmation_url}.

üí´ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–ø–ª–∞—Ç—ã, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –∫–∞—Ä—Ç–∞–º –≤–º–µ—Å—Ç–µ!`

            ctx.reply(message, {
                parse_mode: 'HTML', reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: `${payment.confirmation.confirmation_url}` }],
                        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check-pay ${payment.id}` }]
                    ]
                }
            })

        } catch (error) {
            console.error(error);
        }

    }

});

home.action(/^check-pay (.+)$/, async (ctx) => {
    // @ts-ignore
    const idempotenceKey = ctx.update.callback_query.data.replace("check-pay ", '')

    try {
        // –í–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        // ...
        const payment = await checkout.getPayment(idempotenceKey);
        console.log(payment)
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏

        if (!payment.paid) {
            ctx.reply(`–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${payment.paid}`, {
                parse_mode: 'HTML', reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: `${payment.confirmation.confirmation_url}` }],
                        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check-pay ${payment.id}` }]
                    ]
                }
            });
        } else {
            
            await axios.post(`${apiEndpoint}/telegram/update-subscribe`, {
                telegramChatId: ctx.from.id
            }, {
                headers: {
                    Authorization: `Bearer ${ctx.scene.session.token}`,
                },
            });

            const message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üåü –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–∏ –≤–æ–ª—à–µ–±–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –ø–æ –¢–∞—Ä–æ! –¢–µ–ø–µ—Ä—å –≤–∞—Å –∂–¥–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Ç–∞–π–Ω.

‚ú® –° –∫–∞–∂–¥—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º –∫–∞—Ä—Ç –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ü–µ–Ω–Ω—ã–µ –∏ –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –¢–∞—Ä–æ –≥–æ—Ç–æ–≤–æ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã, —á—Ç–æ–±—ã –æ—Å–≤–µ—Ç–∏—Ç—å –≤–∞—à –ø—É—Ç—å.

üîÆ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É —Ä–∞–¥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞—Å —Å–∫–≤–æ–∑—å –≤–∏—Ö—Ä–∏ —Å—É–¥—å–±—ã. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! üöÄ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è! üòä‚ú®`

            await ctx.reply(message, {
                parse_mode: 'HTML'
            })

            await renderAction(ctx)

        }

        ctx.answerCbQuery()
    } catch (error) {
        console.error(error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã');
    }
});

home.enter(async (ctx) => { return await greeting(ctx) })

// home.on("message", async (ctx) => await greeting (ctx))
home.action(/\./, async (ctx) => {

    await greeting(ctx)

})

export default home
export { greeting }